from celery import shared_task
from django.utils import timezone
from datetime import datetime, timedelta
from .bot import bot
from habits.models import Habit
import logging

logger = logging.getLogger(__name__)


@shared_task
def send_habit_reminders():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö"""
    try:
        current_time = timezone.now().time()
        current_date = timezone.now().date()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å
        habits_to_remind = Habit.objects.filter(
            time__hour=current_time.hour,
            time__minute=current_time.minute,
            is_pleasant=False  # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–æ–ª—å–∫–æ –æ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö
        )
        
        for habit in habits_to_remind:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
            last_reminder = habit.logs.filter(
                completed_at__date=current_date
            ).first()
            
            if not last_reminder:
                message = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ!\n\n"
                message += f"–î–µ–π—Å—Ç–≤–∏–µ: {habit.action}\n"
                message += f"–ú–µ—Å—Ç–æ: {habit.place}\n"
                message += f"–í—Ä–µ–º—è: {habit.time.strftime('%H:%M')}\n"
                message += f"–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {habit.estimated_time} —Å–µ–∫.\n"
                
                if habit.reward:
                    message += f"–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {habit.reward}\n"
                elif habit.related_habit:
                    message += f"–°–≤—è–∑–∞–Ω–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞: {habit.related_habit.action}\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                bot.send_reminder(message, str(habit.user.id))
                logger.info(f"Reminder sent for habit {habit.id}")
        
        logger.info("Habit reminders task completed successfully")
        
    except Exception as e:
        logger.error(f"Error in send_habit_reminders task: {e}")


@shared_task
def check_habit_completion():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫"""
    try:
        current_date = timezone.now().date()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        habits = Habit.objects.filter(is_pleasant=False)
        
        for habit in habits:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            today_log = habit.logs.filter(
                completed_at__date=current_date,
                is_completed=True
            ).first()
            
            if not today_log:
                # –ï—Å–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                message = f"‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–∏–≤—ã—á–∫—É —Å–µ–≥–æ–¥–Ω—è!\n\n"
                message += f"–î–µ–π—Å—Ç–≤–∏–µ: {habit.action}\n"
                message += f"–ú–µ—Å—Ç–æ: {habit.place}\n"
                message += f"–í—Ä–µ–º—è: {habit.time.strftime('%H:%M')}\n"
                
                bot.send_reminder(message, str(habit.user.id))
                logger.info(f"Completion check reminder sent for habit {habit.id}")
        
        logger.info("Habit completion check task completed successfully")
        
    except Exception as e:
        logger.error(f"Error in check_habit_completion task: {e}")


@shared_task
def send_daily_summary():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
    try:
        current_date = timezone.now().date()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
        users_with_habits = Habit.objects.values_list('user', flat=True).distinct()
        
        for user_id in users_with_habits:
            user_habits = Habit.objects.filter(user_id=user_id, is_pleasant=False)
            completed_today = 0
            total_habits = user_habits.count()
            
            for habit in user_habits:
                if habit.logs.filter(
                    completed_at__date=current_date,
                    is_completed=True
                ).exists():
                    completed_today += 1
            
            message = f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞\n\n"
            message += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏–≤—ã—á–µ–∫: {completed_today}/{total_habits}\n"
            message += f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {(completed_today/total_habits*100):.1f}%\n"
            
            if completed_today == total_habits:
                message += "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!"
            elif completed_today > 0:
                message += "üëç –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            else:
                message += "üí™ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å!"
            
            bot.send_reminder(message, str(user_id))
        
        logger.info("Daily summary task completed successfully")
        
    except Exception as e:
        logger.error(f"Error in send_daily_summary task: {e}")
