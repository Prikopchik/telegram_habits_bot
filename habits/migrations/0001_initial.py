# Generated by Django 4.2.7 on 2025-10-19 11:46

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('telegram_chat_id', models.CharField(blank=True, help_text='ID чата в Telegram для отправки уведомлений', max_length=100, null=True, verbose_name='Telegram Chat ID')),
                ('telegram_username', models.CharField(blank=True, help_text='Имя пользователя в Telegram', max_length=100, null=True, verbose_name='Telegram Username')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Habit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('place', models.CharField(help_text='Место, в котором необходимо выполнять привычку', max_length=200, verbose_name='Место')),
                ('time', models.TimeField(help_text='Время, когда необходимо выполнять привычку', verbose_name='Время')),
                ('action', models.CharField(help_text='Действие, которое представляет собой привычка', max_length=200, verbose_name='Действие')),
                ('is_pleasant', models.BooleanField(default=False, help_text='Привычка, которую можно привязать к выполнению полезной привычки', verbose_name='Приятная привычка')),
                ('periodicity', models.PositiveIntegerField(default=1, help_text='Периодичность выполнения привычки для напоминания в днях', verbose_name='Периодичность (дни)')),
                ('reward', models.CharField(blank=True, help_text='Чем пользователь должен себя вознаградить после выполнения', max_length=200, null=True, verbose_name='Вознаграждение')),
                ('estimated_time', models.PositiveIntegerField(help_text='Время, которое предположительно потратит пользователь на выполнение привычки', verbose_name='Время на выполнение (секунды)')),
                ('is_public', models.BooleanField(default=False, help_text='Привычки можно публиковать в общий доступ', verbose_name='Публичная привычка')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('related_habit', models.ForeignKey(blank=True, help_text='Приятная привычка, которая связана с полезной привычкой', null=True, on_delete=django.db.models.deletion.SET_NULL, to='habits.habit', verbose_name='Связанная привычка')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='habits', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Привычка',
                'verbose_name_plural': 'Привычки',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HabitLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата и время выполнения')),
                ('is_completed', models.BooleanField(default=True, verbose_name='Выполнено')),
                ('habit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='habits.habit', verbose_name='Привычка')),
            ],
            options={
                'verbose_name': 'Лог привычки',
                'verbose_name_plural': 'Логи привычек',
                'ordering': ['-completed_at'],
            },
        ),
    ]
